@page
@model Client.Pages.ClientModel
@{
	ViewData["Title"] = "Новые сообщения";
}

<h2>Список сообщений</h2>

<div id="userInfo">
	<p><strong>Никнейм:</strong> <span id="userName"></span></p>
	<p><strong>Клан:</strong> <span id="clanId"></span></p>
</div>

<div id="messagesContainer">
	<div id="messagesList"></div>
</div>

<div id="messageForm">
	<h3>Отправить сообщение</h3>
	<input type="text" id="messageInput" placeholder="Введите сообщение..." />
	<button onclick="sendMessage()">Отправить</button>
</div>

<h3>Сменить клан</h3>
<select id="clanSelect"></select>
<button onclick="changeClan()">Сменить клан</button>


@section Scripts {
	<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.10/signalr.js"></script>
	<script>
				const userToken = sessionStorage.getItem("userToken");
				const clanId = sessionStorage.getItem("clanId");
				const userName = sessionStorage.getItem("userName");
				const userId = sessionStorage.getItem("userId");

				if (!userToken || !userName || !clanId) {
					window.location.href = "/register";
				}

				document.getElementById("userName").textContent = userName;
				document.getElementById("clanId").textContent = clanId;

						function loadClans() {
					fetch("http://localhost:5001/api/clan", {
				//	fetch("http://localhost:5093/api/clan", {
						method: "GET",
						headers: {
							"Authorization": `Bearer ${userToken}`
						}
					})
					.then(response => {
						if (!response.ok) {
							throw new Error("Ошибка загрузки кланов");
						}
						return response.json();
					})
					.then(clans => {
						const clanSelect = document.getElementById("clanSelect");
						clanSelect.innerHTML = "";

						clans.forEach(clan => {
							const option = document.createElement("option");
							option.value = clan.id;
							option.textContent = clan.name;
							clanSelect.appendChild(option);
						});
					})
					.catch(error => {
						console.error("Ошибка загрузки кланов:", error);
						alert("Не удалось загрузить список кланов.");
					});
				}
				let currentClanId = clanId;

				function changeClan() {
			const newClanId = document.getElementById("clanSelect").value;
			const userId = sessionStorage.getItem("userId");

			if (!userId || !newClanId) {
				alert("Ошибка: нет данных о пользователе или клане.");
				return;
			}

			if (newClanId !== currentClanId) {
				console.log("Изменение клана...");

				connection.invoke("LeaveGroup", `clan-${currentClanId}`).catch(function (err) {
					console.error("Ошибка при выходе из группы:", err.toString());
				});

			//	fetch(`http://localhost:5093/api/user/changeClan?clanId=${newClanId}`, {
				fetch(`http://localhost:5001/api/user/changeClan?clanId=${newClanId}`, {
					method: "PUT",
					headers: {
						"Authorization": `Bearer ${userToken}`
					}
				})
				.then(response => {
					if (!response.ok) {
						throw new Error("Ошибка смены клана");
					}
					return response.json();
				})
				.then(user => {
					sessionStorage.setItem("userName", user.userName);
					sessionStorage.setItem("userToken", user.userToken);
					sessionStorage.setItem("clanId", user.clanId);
					sessionStorage.setItem("userId", user.id);

					currentClanId = user.clanId;
					document.getElementById("clanId").textContent = user.clanId;

					restartSignalRConnection();

					loadLastMessages();
				})
				.catch(error => {
					console.error("Ошибка при смене клана:", error);
					alert("Не удалось сменить клан.");
				});
			}
		}
				function restartSignalRConnection() {
			if (connection) {
				connection.stop().then(() => {
					console.log("SignalR соединение закрыто, пересоздаю...");
					startSignalRConnection();
				}).catch(err => console.error("Ошибка при остановке SignalR:", err));
			} else {
				startSignalRConnection();
			}
		}

		function startSignalRConnection() {
			connection = new signalR.HubConnectionBuilder()
				//.withUrl("http://localhost:5093/messageHub", {
				.withUrl("http://localhost:5001/messageHub", {
					accessTokenFactory: () => sessionStorage.getItem("userToken")
				})
				.build();

			connection.start().then(() => {
				console.log("SignalR подключен с новым токеном");

				connection.invoke("JoinGroup", `clan-${sessionStorage.getItem("clanId")}`)
					.catch(err => console.error("Ошибка при подключении к новой группе:", err));

				connection.on("ReceiveNewMessage", function (message) {
					renderMessage(message);
				});

			}).catch(err => console.error("Ошибка подключения к SignalR:", err));
		}




						function loadClanInfo(clanId) {
			const userToken = sessionStorage.getItem("userToken");

			fetch(`http://localhost:5001/api/clan/id/${clanId}`, {
		//	fetch(`http://localhost:5093/api/clan/id/${clanId}`, {
				method: "GET",
				headers: {
					"Authorization": `Bearer ${userToken}`
				}
			})
			.then(response => {
				if (!response.ok) {
					throw new Error("Ошибка загрузки информации о клане");
				}
				return response.json();
			})
			.then(clan => {
				document.getElementById("clanId").textContent = clan.name;
			})
			.catch(error => {
				console.error("Ошибка загрузки информации о клане:", error);
				alert("Не удалось загрузить информацию о клане.");
			});
		}

				function renderMessage(message) {
			const currentUserId = sessionStorage.getItem("userId");

			const messageElement = document.createElement("div");
			messageElement.classList.add("message");

			if (message.sender.id === currentUserId) {
				messageElement.classList.add("outgoing");
			} else {
				messageElement.classList.add("incoming");
			}

			messageElement.innerHTML = `
				<p class="message-meta">
					<strong>${message.sender.userName}</strong>
				</p>
				<p class="message-text">${message.message}</p>
			`;

			document.getElementById("messagesList").appendChild(messageElement);
			document.getElementById("messagesContainer").scrollTop =
				document.getElementById("messagesContainer").scrollHeight;
		}



						function loadLastMessages() {
			const userToken = sessionStorage.getItem("userToken");
			const currentUserId = sessionStorage.getItem("userId");

			fetch("http://localhost:5001/api/message/lastMessages/50", {
		//	fetch("http://localhost:5093/api/message/lastMessages/50", {
				method: "GET",
				headers: {
					"Authorization": `Bearer ${userToken}`
				}
			})
			.then(response => response.json())
			.then(messages => {
				document.getElementById("messagesList").innerHTML = "";
				messages.forEach(message => {
					message.isOutgoing = message.sender.id === currentUserId;
					renderMessage(message);
				});
			})
			.catch(error => console.error("Ошибка загрузки сообщений:", error));
		}



					let connection = new signalR.HubConnectionBuilder()
		//.withUrl("http://localhost:5093/messageHub", {
		.withUrl("http://localhost:5001/messageHub", {
			accessTokenFactory: () => sessionStorage.getItem("userToken")
		})
		.build();

				connection.start().then(function () {
					console.log("SignalR connected");

					connection.invoke("JoinGroup", `clan-${clanId}`).catch(function (err) {
						return console.error("Failed to join group: " + err.toString());
					});

				}).catch(function (err) {
					console.error("SignalR connection error: ", err.toString());
				});

				connection.on("ReceiveNewMessage", function (message) {
					renderMessage(message);
				});



						function sendMessage() {
			const messageContent = document.getElementById("messageInput").value.trim();

			if (!messageContent) {
				alert("Введите сообщение перед отправкой!");
				return;
			}

			const messageData = {
				message: messageContent
			};

			connection.invoke("SendMessage", messageData)
				.then(() => {
					console.log("Сообщение отправлено через SignalR");
					document.getElementById("messageInput").value = "";
				})
				.catch(error => {
					console.error("Ошибка при отправке сообщения через SignalR:", error);
					alert("Ошибка при отправке сообщения!");
				});
		}


		window.onload = function() {
			loadClans();
			loadLastMessages();
			loadClanInfo(clanId);
		};
	</script>

	<style>
		#messagesContainer {
			width: 100%;
			max-width: 600px;
			height: 400px;
			border: 1px solid #ccc;
			overflow-y: auto;
			padding: 10px;
			background-color: #f9f9f9;
		}

		#messagesList {
			display: flex;
			flex-direction: column;
			gap: 10px;
			padding: 10px;
		}

		.message {
			max-width: 70%;
			padding: 10px;
			border-radius: 10px;
			word-wrap: break-word;
		}

		.incoming {
			align-self: flex-start;
			background-color: #f1f1f1;
		}

		.outgoing {
			align-self: flex-end;
			background-color: #d6eaff;
		}

		.message-meta {
			font-size: 0.8em;
			color: #555;
			margin-bottom: 3px;
		}

		.message-text {
			margin: 0;
		}

		#messageForm {
			margin-top: 10px;
		}

		#messageInput {
			width: 80%;
			padding: 5px;
		}

		button {
			padding: 5px 10px;
			background-color: #007bff;
			color: white;
			border: none;
			cursor: pointer;
		}

			button:hover {
				background-color: #0056b3;
			}
	</style>
}
